(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('ng2-img-max')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs', 'ng2-img-max'], factory) :
	(factory((global['ng2-img-tools'] = global['ng2-img-tools'] || {}),global.ng.core,global.Rx,global.ng2ImgMax));
}(this, (function (exports,_angular_core,rxjs,ng2ImgMax) { 'use strict';

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$1 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.ImgCropService = (function () {
    function ImgCropService(ng2ImgMaxService) {
        this.ng2ImgMaxService = ng2ImgMaxService;
    }
    ImgCropService.prototype.cropImage = function (file, toWidth, toHeight, startX, startY) {
        var _this = this;
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        var croppedImageSubject = new rxjs.Subject();
        if (file.type !== "image/jpeg" && file.type !== "image/png") {
            // END OF CROPPING
            setTimeout(function () {
                croppedImageSubject.error({ croppedFile: file, reason: "File provided is neither of type jpg nor of type png.", error: "INVALID_EXTENSION" });
            }, 0);
            return croppedImageSubject.asObservable();
        }
        var cvs = document.createElement('canvas');
        var ctx = cvs.getContext('2d');
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                cvs.width = toWidth;
                cvs.height = toHeight;
                ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);
                var useAlpha = true;
                if (file.type === "image/jpeg" || (file.type === "image/png" && !_this.isImgUsingAlpha(imageData))) {
                    //image without alpha
                    useAlpha = false;
                    ctx = cvs.getContext('2d', { 'alpha': false });
                    ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                }
                cvs.toBlob(function (blob) {
                    var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                    // END OF CROPPING
                    croppedImageSubject.next(newFile);
                }, useAlpha ? "image/png" : "image/jpeg");
            });
        };
        img.src = window.URL.createObjectURL(file);
        return croppedImageSubject.asObservable();
    };
    ImgCropService.prototype.isImgUsingAlpha = function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    };
    ImgCropService.prototype.generateResultFile = function (blob, name, type, lastModified) {
        var resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    };
    ImgCropService.prototype.blobToFile = function (blob, name, lastModified) {
        var file = blob;
        file.name = name;
        file.lastModified = lastModified;
        //Cast to a File() type
        return file;
    };
    return ImgCropService;
}());
exports.ImgCropService = __decorate$1([
    _angular_core.Injectable(),
    __param$1(0, _angular_core.Inject(_angular_core.forwardRef(function () { return ng2ImgMax.Ng2ImgMaxService; })))
], exports.ImgCropService);

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$2 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.ImgResizeExactService = (function () {
    function ImgResizeExactService(ng2ImgMaxService, imgCropService) {
        this.ng2ImgMaxService = ng2ImgMaxService;
        this.imgCropService = imgCropService;
    }
    ImgResizeExactService.prototype.resizeExactFill = function (file, toWidth, toHeight, fillColor) {
        var _this = this;
        var resizedImageSubject = new rxjs.Subject();
        if (file.type !== "image/jpeg" && file.type !== "image/png") {
            setTimeout(function () {
                resizedImageSubject.error({ resizedFile: file, reason: "File provided is neither of type jpg nor of type png.", error: "INVALID_EXTENSION" });
            }, 0);
            return resizedImageSubject.asObservable();
        }
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                var imgRatio = orientedImg.width / orientedImg.height;
                var resizedRatio = toWidth / toHeight;
                /* ratio > 1 means width > height */
                /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */
                var resizeHeight = 100000;
                var resizeWidth = 100000;
                if (imgRatio > resizedRatio) {
                    /* the original height is smaller than the resized height as in ratio, therefore we have to resize to width, then fill to the height */
                    resizeWidth = toWidth;
                }
                else if (imgRatio <= resizedRatio) {
                    /* the original height is bigger than the resized height as in ratio, therefore we can resize to height, then fill to the width */
                    resizeHeight = toHeight;
                }
                _this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe(function (resizeResult) {
                    /* To fill the image based on the center, we calculate where the img needs to be positioned to be centered*/
                    var startX = 0;
                    var startY = 0;
                    /* one side is already resized exactly to the desired size, now fill the other side */
                    if (resizeWidth === 100000) {
                        /* resized to height -> as we fill to the width, we have to set startX */
                        var newImgWidth = orientedImg.width / (orientedImg.height / toHeight);
                        startX = (newImgWidth - toWidth) / 2;
                    }
                    else if (resizeHeight === 100000) {
                        /* resized to width -> as we fill to the height, we have to set startY */
                        var newImgHeight = orientedImg.height / (orientedImg.width / toWidth);
                        startY = (newImgHeight - toHeight) / 2;
                    }
                    var img = new Image();
                    var cvs = document.createElement('canvas');
                    var ctx = cvs.getContext('2d');
                    img.onload = function () {
                        cvs.width = toWidth;
                        cvs.height = toHeight;
                        if (fillColor) {
                            ctx.fillStyle = fillColor;
                            ctx.fillRect(0, 0, toWidth, toHeight);
                        }
                        ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                        var imageData = ctx.getImageData(0, 0, toWidth, toHeight);
                        var useAlpha = true;
                        if (file.type === "image/jpeg" || (file.type === "image/png" && !_this.isImgUsingAlpha(imageData))) {
                            //image without alpha
                            useAlpha = false;
                            ctx = cvs.getContext('2d', { 'alpha': false });
                            if (fillColor) {
                                ctx.fillStyle = fillColor;
                                ctx.fillRect(0, 0, toWidth, toHeight);
                            }
                            ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                        }
                        cvs.toBlob(function (blob) {
                            window.URL.revokeObjectURL(img.src);
                            var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                            // END OF CROPPING
                            resizedImageSubject.next(newFile);
                        }, useAlpha ? "image/png" : "image/jpeg");
                    };
                    img.src = window.URL.createObjectURL(resizeResult);
                }, function (error) {
                    //something went wrong 
                    resizedImageSubject.error(error);
                });
            });
        };
        img.src = window.URL.createObjectURL(file);
        return resizedImageSubject.asObservable();
    };
    ImgResizeExactService.prototype.resizeExactCrop = function (file, toWidth, toHeight) {
        var _this = this;
        var resizedImageSubject = new rxjs.Subject();
        if (file.type !== "image/jpeg" && file.type !== "image/png") {
            setTimeout(function () {
                resizedImageSubject.error({ resizedFile: file, reason: "File provided is neither of type jpg nor of type png.", error: "INVALID_EXTENSION" });
            }, 0);
            return resizedImageSubject.asObservable();
        }
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                var imgRatio = orientedImg.width / orientedImg.height;
                var resizedRatio = toWidth / toHeight;
                /* ratio > 1 means width > height */
                /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */
                var resizeHeight = 100000;
                var resizeWidth = 100000;
                /* To crop the image based on the center, so we will keep the most important part of the image, we calculate to crop from where to where */
                var startX = 0;
                var startY = 0;
                if (imgRatio > resizedRatio) {
                    /* the original height is smaller than the resized height as in ratio, therefore we have to resize to height, then crop to the width */
                    resizeHeight = toHeight;
                }
                else if (imgRatio <= resizedRatio) {
                    /* the original height is bigger than the resized height as in ratio, therefore we can resize to width, then crop to the height */
                    resizeWidth = toWidth;
                }
                _this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe(function (resizeResult) {
                    /* one side is already resized exactly to the desired size, now crop the other side */
                    if (resizeWidth === 100000) {
                        /* resized to height -> as we crop to the width, we have to set startX */
                        var newImgWidth = orientedImg.width / (orientedImg.height / toHeight);
                        startX = (newImgWidth - toWidth) / 2;
                    }
                    else if (resizeHeight === 100000) {
                        /* resized to width -> as we crop to the height, we have to set startY */
                        var newImgHeight = orientedImg.height / (orientedImg.width / toWidth);
                        startY = (newImgHeight - toHeight) / 2;
                    }
                    _this.imgCropService.cropImage(resizeResult, toWidth, toHeight, startX, startY).subscribe(function (cropResult) {
                        //all good, result is a file
                        resizedImageSubject.next(cropResult);
                    }, function (error) {
                        //something went wrong 
                        resizedImageSubject.error(error);
                    });
                }, function (error) {
                    //something went wrong 
                    resizedImageSubject.error(error);
                });
            });
        };
        img.src = window.URL.createObjectURL(file);
        return resizedImageSubject.asObservable();
    };
    ImgResizeExactService.prototype.isImgUsingAlpha = function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    };
    ImgResizeExactService.prototype.generateResultFile = function (blob, name, type, lastModified) {
        var resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    };
    ImgResizeExactService.prototype.blobToFile = function (blob, name, lastModified) {
        var file = blob;
        file.name = name;
        file.lastModified = lastModified;
        //Cast to a File() type
        return file;
    };
    return ImgResizeExactService;
}());
exports.ImgResizeExactService = __decorate$2([
    _angular_core.Injectable(),
    __param$2(0, _angular_core.Inject(_angular_core.forwardRef(function () { return ng2ImgMax.Ng2ImgMaxService; }))),
    __param$2(1, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.ImgCropService; })))
], exports.ImgResizeExactService);

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.Ng2ImgToolsService = (function () {
    function Ng2ImgToolsService(imgResizeExactService, ng2ImgMaxService, imgCropService) {
        this.imgResizeExactService = imgResizeExactService;
        this.ng2ImgMaxService = ng2ImgMaxService;
        this.imgCropService = imgCropService;
    }
    Ng2ImgToolsService.prototype.compress = function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {
        if (ignoreAlpha === void 0) { ignoreAlpha = false; }
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);
    };
    Ng2ImgToolsService.prototype.resize = function (files, maxWidth, maxHeight, logExecutionTime) {
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);
    };
    Ng2ImgToolsService.prototype.crop = function (files, toWidth, toHeight, startX, startY) {
        var _this = this;
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        var croppedFileSubject = new rxjs.Subject();
        files.forEach(function (file) {
            _this.cropImage(file, toWidth, toHeight, startX, startY).subscribe(function (value) {
                croppedFileSubject.next(value);
            }, function (error) {
                croppedFileSubject.error(error);
            });
        });
        return croppedFileSubject.asObservable();
    };
    Ng2ImgToolsService.prototype.resizeExactCrop = function (files, toWidth, toHeight) {
        var _this = this;
        var resizedFileSubject = new rxjs.Subject();
        files.forEach(function (file) {
            _this.resizeExactCropImage(file, toWidth, toHeight).subscribe(function (value) {
                resizedFileSubject.next(value);
            }, function (error) {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    };
    Ng2ImgToolsService.prototype.resizeExactFill = function (files, toWidth, toHeight, fillColor) {
        var _this = this;
        var resizedFileSubject = new rxjs.Subject();
        files.forEach(function (file) {
            _this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe(function (value) {
                resizedFileSubject.next(value);
            }, function (error) {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    };
    Ng2ImgToolsService.prototype.resizeExactFillImage = function (file, toWidth, toHeight, fillColor) {
        return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);
    };
    Ng2ImgToolsService.prototype.resizeExactCropImage = function (file, toWidth, toHeight) {
        return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);
    };
    Ng2ImgToolsService.prototype.cropImage = function (file, toWidth, toHeight, startX, startY) {
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);
    };
    Ng2ImgToolsService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {
        if (ignoreAlpha === void 0) { ignoreAlpha = false; }
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);
    };
    Ng2ImgToolsService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);
    };
    Ng2ImgToolsService.prototype.getEXIFOrientedImage = function (image) {
        return this.ng2ImgMaxService.getEXIFOrientedImage(image);
    };
    return Ng2ImgToolsService;
}());
exports.Ng2ImgToolsService = __decorate([
    _angular_core.Injectable(),
    __param(0, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.ImgResizeExactService; }))),
    __param(1, _angular_core.Inject(_angular_core.forwardRef(function () { return ng2ImgMax.Ng2ImgMaxService; }))),
    __param(2, _angular_core.Inject(_angular_core.forwardRef(function () { return exports.ImgCropService; })))
], exports.Ng2ImgToolsService);

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.Ng2ImgToolsModule = (function () {
    function Ng2ImgToolsModule() {
    }
    return Ng2ImgToolsModule;
}());
exports.Ng2ImgToolsModule = __decorate$3([
    _angular_core.NgModule({
        imports: [
            ng2ImgMax.Ng2ImgMaxModule
        ],
        providers: [
            { provide: exports.ImgResizeExactService, useClass: exports.ImgResizeExactService },
            { provide: exports.ImgCropService, useClass: exports.ImgCropService },
            { provide: exports.Ng2ImgToolsService, useClass: exports.Ng2ImgToolsService },
            { provide: ng2ImgMax.Ng2ImgMaxService, useClass: ng2ImgMax.Ng2ImgMaxService }
        ]
    })
], exports.Ng2ImgToolsModule);

Object.defineProperty(exports, '__esModule', { value: true });

})));
