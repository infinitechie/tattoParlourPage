'use strict';

/*global window, document*/
/*eslint space-infix-ops:0*/

// Feature detect
var WORKER = (typeof window !== 'undefined') && ('Worker' in window);
if (WORKER) {
    // IE don't allow to create webworkers from string. We should check it.
    // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11
    try {
        var wkr = require('webworkify')(function() {});
        wkr.terminate();
    } catch (__) {
        WORKER = false;
    }
}

// import resize_js from './lib/resize_js';
// import resize_js_ww from './lib/resize_js_ww';
// import resize_array from './lib/js/resize_array';
// import unsharp from './lib/js/unsharp';
// import assign from 'object-assign';

////////////////////////////////////////////////////////////////////////////////
// Helpers
function _class(obj) { return Object.prototype.toString.call(obj); }

function isFunction(obj) { return _class(obj) === '[object Function]'; }

////////////////////////////////////////////////////////////////////////////////
// API methods

// Canvas async resize
//
function resizeCanvas(from, to, options, callback) {
    if (isFunction(options)) {
        callback = options;
        options = {};
    }

    if (!isNaN(options)) {
        options = { quality: options, alpha: false };
    }

    // Force flag reset to simplify status check
    if (!WORKER) { exports.WW = false; }

    if (WORKER && exports.WW) {
        exports.debug('Resize buffer in WebWorker');

        return resize_js_ww(from, to, options, callback);
    }

    // Fallback to sync call, if WebWorkers not available
    exports.debug('Resize buffer sync (freeze event loop)');

    return resize_js(from, to, options, callback);
}

// RGBA buffer resize
//
function resizeBuffer(options, callback) {
    var _opts = {
        src: options.src,
        dest: options.dest,
        width: options.width | 0,
        height: options.height | 0,
        toWidth: options.toWidth | 0,
        toHeight: options.toHeight | 0,
        quality: options.quality,
        alpha: options.alpha,
        unsharpAmount: options.unsharpAmount,
        unsharpRadius: options.unsharpRadius,
        unsharpThreshold: options.unsharpThreshold
    };

    _opts.dest = resize_array(_opts);

    if (_opts.unsharpAmount) {
        unsharp(_opts.dest, _opts.toWidth, _opts.toHeight,
            _opts.unsharpAmount, _opts.unsharpRadius, _opts.unsharpThreshold);
    }

    callback(null, _opts.dest);
}

function terminate(id) {
    resize_js.terminate(id);
    resize_js_ww.terminate(id);
}
var exports = {};
exports.resizeCanvas = resizeCanvas;
exports.resizeBuffer = resizeBuffer;
exports.terminate = terminate;
exports.WW = WORKER;
exports.debug = function() {};

var pica = exports;
window.pica = pica;